cmp_stmt        : TOKEN_OPEN_BRACE stmt_block TOKEN_CLOSE_BRACE
                | TOKEN_OPEN_BRACE TOKEN_CLOSE_BRACE
                ;

stmt_block      : stmt_block stmt
                | stmt
                ;

sel_stmt        : TOKEN_IF TOKEN_OPEN_PARENS expr TOKEN_CLOSE_PARENS stmt TOKEN_ELSE stmt
                | TOKEN_IF TOKEN_OPEN_PARENS expr TOKEN_CLOSE_PARENS stmt
                ;

iter_stmt       : TOKEN_WHILE TOKEN_OPEN_PARENS expr TOKEN_CLOSE_PARENS stmt
                | TOKEN_FOR TOKEN_OPEN_PARENS expr TOKEN_SEMICOLON expr TOKEN_SEMICOLON expr TOKEN_CLOSE_PARENS stmt
                ;

stmt            : decl
                | expr
                | sel_stmt
                | print
                | return
                ;

decl            : TOKEN_IDENTIFIER TOKEN_COLON type init
                | TOKEN_IDENTIFIER TOKEN_COLON TOKEN_FUNC type TOKEN_OPEN_PARENS param_list TOKEN_CLOSE_PARENS init
                ;

type            : TOKEN_TYPE
                | TOKEN_VOID
                | TOKEN_ARR TOKEN_OPEN_BRACKET expr TOKEN_CLOSE_BRACKET type
                ;

init            : 
                | TOKEN_ASSIGN expr
                | TOKEN_ASSIGN TOKEN_OPEN_BRACE stmt TOKEN_CLOSE_BRACE
                ;

expr            : TOKEN_IDENTIFIER TOKEN_ASSIGN or_expr
                | or_expr
                ;

expr_list       : expr_list TOKEN_COMMA expr
                | expr
                ;

param           : TOKEN_IDENTIFIER TOKEN_COLON type
                ;

param_list      : param_list TOKEN_COMMA param
                | param
                ;

or_expr         : or_expr TOKEN_OR and_expr
                | and_expr
                ;

and_expr        : and_expr TOKEN_AND eq_expr
                | eq_expr
                ;

eq_expr         : eq_expr TOKEN_EQUALITY rel_expr
                | eq_expr TOKEN_INEQUALITY rel_expr
                | rel_expr
                ;

rel_expr        : rel_expr TOKEN_GE add_expr
                | rel_expr TOKEN_LE add_expr
                | rel_expr TOKEN_GREATER add_expr
                | rel_expr TOKEN_LESS add_expr
                | add_expr
                ;

add_expr        : add_expr TOKEN_ADD mul_expr
                | add_expr TOKEN_SUBTRACT mul_expr
                | mul_expr
                ;

mul_expr        : mul_expr TOKEN_MULTIPLY base_expr
                | mul_expr TOKEN_DIVIDE base_expr
                | mul_expr TOKEN_MOD base_expr
                | base_expr
                ;

base_expr       : TOKEN_OPEN_PARENS expr TOKEN_CLOSE_PARENS
                | unary num
                ;

unary           : 
                | TOKEN_SUBTRACT
                | TOKEN_ADD
                ;

num             : TOKEN_INTEGER
                | TOKEN_FLOAT
                ;

sel_stmt        : TOKEN_IF TOKEN_OPEN_PARENS expr TOKEN_CLOSE_PARENS sel_stmt
                | TOKEN_IF TOKEN_OPEN_PARENS expr TOKEN_CLOSE_PARENS contained_sel TOKEN_ELSE sel_stmt
                | other
                ;

contained_sel   : TOKEN_IF TOKEN_OPEN_PARENS expr TOKEN_CLOSE_PARENS contained_sel TOKEN_ELSE contained_sel
                | other
                ;

other           : 

print           : TOKEN_PRINT expr_list
                ;

return          : TOKEN_RETURN expr
                ;